// Generated by CoffeeScript 1.11.0
(function() {
  'use strict';
  var PathFinder, findPath;

  findPath = function(playfield, start) {
    var currentChar, initialPath, loopingPath, path, pointer, splitPosition;
    path = new bef.Path();
    pointer = start.clone();
    while (true) {
      currentChar = playfield.getAt(pointer.x, pointer.y);
      if (currentChar === '"') {
        path.push(pointer.x, pointer.y, pointer.dir, currentChar);
        while (true) {
          pointer.advance();
          currentChar = playfield.getAt(pointer.x, pointer.y);
          if (currentChar === '"') {
            path.push(pointer.x, pointer.y, pointer.dir, currentChar);
            break;
          }
          path.push(pointer.x, pointer.y, pointer.dir, currentChar, true);
        }
        pointer.advance();
        continue;
      }
      pointer.turn(currentChar);
      if (path.hasNonString(pointer.x, pointer.y, pointer.dir)) {
        splitPosition = (path.getEntryAt(pointer.x, pointer.y, pointer.dir)).index;
        if (splitPosition > 0) {
          initialPath = path.prefix(splitPosition);
          loopingPath = path.suffix(splitPosition);
          loopingPath.looping = true;
          return {
            type: 'composed',
            initialPath: initialPath,
            loopingPath: loopingPath
          };
        } else {
          path.looping = true;
          return {
            type: 'looping',
            loopingPath: path
          };
        }
      }
      path.push(pointer.x, pointer.y, pointer.dir, currentChar);
      if (currentChar === '|' || currentChar === '_' || currentChar === '?' || currentChar === '@' || currentChar === 'p') {
        path.ending = {
          x: pointer.x,
          y: pointer.y,
          dir: pointer.dir,
          char: currentChar
        };
        return {
          type: 'simple',
          path: path
        };
      }
      if (currentChar === '#') {
        pointer.advance();
      }
      pointer.advance();
    }
  };

  PathFinder = function() {};

  Object.assign(PathFinder, {
    findPath: findPath
  });

  if (window.bef == null) {
    window.bef = {};
  }

  window.bef.PathFinder = PathFinder;

}).call(this);
