// Generated by CoffeeScript 1.12.4
(function() {
  'use strict';
  var Playfield, initField, initPathPlane, initSize;

  Playfield = function(string, size) {
    var lines, ref;
    lines = string.split('\n');
    ref = initSize(lines, size), this.width = ref[0], this.height = ref[1];
    this.field = initField(lines, this.width, this.height);
    this.pathPlane = initPathPlane(this.width, this.height);
  };

  initSize = function(lines, size) {
    if (size != null) {
      return [size.width, size.height];
    } else {
      return [
        Math.max.apply(Math, lines.map(function(line) {
          return line.length;
        })), lines.length
      ];
    }
  };

  initField = function(lines, width, height) {
    var chars, field, i, iLimit, j, k, l, line, ref, ref1, ref2;
    field = [];
    i = 0;
    iLimit = Math.min(lines.length, height);
    while (i < iLimit) {
      line = lines[i];
      chars = line.split('');
      chars.splice(width, chars.length);
      for (j = k = ref = chars.length, ref1 = width; ref <= ref1 ? k < ref1 : k > ref1; j = ref <= ref1 ? ++k : --k) {
        chars.push(' ');
      }
      field.push(chars);
      i++;
    }
    i = lines.length;
    iLimit = height;
    while (i < iLimit) {
      line = [];
      for (j = l = 0, ref2 = width; 0 <= ref2 ? l < ref2 : l > ref2; j = 0 <= ref2 ? ++l : --l) {
        line.push(' ');
      }
      field.push(line);
      i++;
    }
    return field;
  };

  initPathPlane = function(width, height) {
    var i, j, k, l, line, pathPlane, ref, ref1;
    pathPlane = [];
    for (i = k = 1, ref = height; 1 <= ref ? k <= ref : k >= ref; i = 1 <= ref ? ++k : --k) {
      line = [];
      for (j = l = 1, ref1 = width; 1 <= ref1 ? l <= ref1 : l >= ref1; j = 1 <= ref1 ? ++l : --l) {
        line.push(new Map);
      }
      pathPlane.push(line);
    }
    return pathPlane;
  };

  Playfield.prototype.getAt = function(x, y) {
    return this.field[y][x];
  };

  Playfield.prototype.setAt = function(x, y, char) {
    this.field[y][x] = char;
    return this;
  };

  Playfield.prototype.addPath = function(path) {
    var cell, entry, k, len, ref;
    ref = path.list;
    for (k = 0, len = ref.length; k < len; k++) {
      entry = ref[k];
      cell = this.pathPlane[entry.y][entry.x];
      cell.set(path.id, path);
    }
    return this;
  };

  Playfield.prototype.isInside = function(x, y) {
    return (0 <= x && x < this.width) && (0 <= y && y < this.height);
  };

  Playfield.prototype.getPathsThrough = function(x, y) {
    return Array.from(this.pathPlane[y][x].values());
  };

  Playfield.prototype.removePath = function(path) {
    var cell, entry, k, len, ref;
    ref = path.list;
    for (k = 0, len = ref.length; k < len; k++) {
      entry = ref[k];
      cell = this.pathPlane[entry.y][entry.x];
      cell["delete"](path.id);
    }
  };

  Playfield.prototype.getSize = function() {
    return {
      width: this.width,
      height: this.height
    };
  };

  Playfield.prototype.clearPaths = function() {
    var i, j, k, l, ref, ref1;
    for (i = k = 0, ref = this.height; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {
      for (j = l = 0, ref1 = this.width; 0 <= ref1 ? l < ref1 : l > ref1; j = 0 <= ref1 ? ++l : --l) {
        this.pathPlane[i][j] = new Map;
      }
    }
  };

  if (window.bef == null) {
    window.bef = {};
  }

  window.bef.Playfield = Playfield;

}).call(this);
