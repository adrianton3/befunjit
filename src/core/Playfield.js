// Generated by CoffeeScript 1.11.0
(function() {
  'use strict';
  var DEFAULT, Playfield;

  DEFAULT = {
    WIDTH: 80,
    HEIGHT: 25
  };

  Playfield = function(width1, height1) {
    this.width = width1 != null ? width1 : DEFAULT.WIDTH;
    this.height = height1 != null ? height1 : DEFAULT.HEIGHT;
    this.field = [];
    this.pathPlane = [];
  };

  Playfield.prototype._initPathPlane = function(width, height) {
    var i, j, k, l, line, ref, ref1;
    if (width == null) {
      width = DEFAULT.WIDTH;
    }
    if (height == null) {
      height = DEFAULT.HEIGHT;
    }
    this.pathPlane = [];
    for (i = k = 1, ref = height; 1 <= ref ? k <= ref : k >= ref; i = 1 <= ref ? ++k : --k) {
      line = [];
      for (j = l = 1, ref1 = width; 1 <= ref1 ? l <= ref1 : l >= ref1; j = 1 <= ref1 ? ++l : --l) {
        line.push(new Map);
      }
      this.pathPlane.push(line);
    }
  };

  Playfield.prototype.fromString = function(string, width, height) {
    var i, j, k, l, line, lines, ref, ref1, ref2, ref3;
    lines = string.split('\n');
    ref = (width != null) && (height != null) ? [width, height] : [
      Math.max.apply(Math, lines.map(function(line) {
        return line.length;
      })), lines.length
    ], this.width = ref[0], this.height = ref[1];
    this.field = [];
    lines.forEach((function(_this) {
      return function(line) {
        var chars, i, k, ref1, ref2;
        chars = line.split('');
        for (i = k = ref1 = chars.length, ref2 = _this.width; ref1 <= ref2 ? k < ref2 : k > ref2; i = ref1 <= ref2 ? ++k : --k) {
          chars.push(' ');
        }
        return _this.field.push(chars);
      };
    })(this));
    for (i = k = ref1 = lines.length, ref2 = this.height; ref1 <= ref2 ? k < ref2 : k > ref2; i = ref1 <= ref2 ? ++k : --k) {
      line = [];
      for (j = l = 0, ref3 = this.width; 0 <= ref3 ? l < ref3 : l > ref3; j = 0 <= ref3 ? ++l : --l) {
        line.push(' ');
      }
      this.field.push(line);
    }
    this._initPathPlane(width, height);
    return this;
  };

  Playfield.prototype.getAt = function(x, y) {
    return this.field[y][x];
  };

  Playfield.prototype.setAt = function(x, y, char) {
    this.field[y][x] = char;
    return this;
  };

  Playfield.prototype.addPath = function(path) {
    path.list.forEach(function(entry) {
      var cell;
      cell = this.pathPlane[entry.y][entry.x];
      cell.set(path.id, path);
    }, this);
    return this;
  };

  Playfield.prototype.isInside = function(x, y) {
    return (0 <= x && x < this.width) && (0 <= y && y < this.height);
  };

  Playfield.prototype.getPathsThrough = function(x, y) {
    return Array.from(this.pathPlane[y][x].values());
  };

  Playfield.prototype.removePath = function(path) {
    path.list.forEach((function(_this) {
      return function(entry) {
        var cell;
        cell = _this.pathPlane[entry.y][entry.x];
        cell["delete"](path.id);
      };
    })(this));
  };

  Playfield.prototype.getSize = function() {
    return {
      width: this.width,
      height: this.height
    };
  };

  Playfield.prototype.clearPaths = function() {
    var i, j, k, l, ref, ref1;
    for (i = k = 0, ref = this.height; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {
      for (j = l = 0, ref1 = this.width; 0 <= ref1 ? l < ref1 : l > ref1; j = 0 <= ref1 ? ++l : --l) {
        this.pathPlane[i][j] = new Map;
      }
    }
  };

  if (window.bef == null) {
    window.bef = {};
  }

  window.bef.Playfield = Playfield;

}).call(this);
