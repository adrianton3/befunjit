// Generated by CoffeeScript 1.7.1
(function() {
  'use strict';
  var Runtime;

  Runtime = function(interpreter) {
    this.interpreter = interpreter;
    this.stack = [];
    this.flags = {
      pathInvalidatedAhead: false
    };
    this.inputPointer = 0;
    this.inputList = [];
    this.outRecord = [];
  };

  Runtime.prototype.push = function(e) {
    return this.stack.push(e);
  };

  Runtime.prototype.pop = function() {
    if (this.stack.length < 1) {
      return 0;
    }
    return this.stack.pop();
  };

  Runtime.prototype.out = function(e) {
    return this.outRecord.push(e);
  };

  Runtime.prototype.setInput = function(values) {
    this.inputList = values.slice(0);
    return this.inputPointer = 0;
  };

  Runtime.prototype.next = function() {
    var ret;
    ret = this.inputList[this.inputPointer];
    if (this.inputPointer < this.inputList.length) {
      this.inputPointer++;
      return ret;
    } else {
      return 0;
    }
  };

  Runtime.prototype.nextChar = function() {
    var ret;
    ret = this.inputList[this.inputPointer].charCodeAt(0);
    if (this.inputPointer < this.inputList.length) {
      this.inputPointer++;
      return ret;
    } else {
      return 0;
    }
  };

  Runtime.prototype.put = function(e, y, x, currentX, currentY, currentDir, index) {
    return this.interpreter.put(x, y, String.fromCharCode(e), currentX, currentY, currentDir, index);
  };

  Runtime.prototype.get = function(y, x) {
    return this.interpreter.get(x, y);
  };

  Runtime.prototype.duplicate = function() {
    var e;
    e = this.stack[this.stack.length - 1];
    return this.stack.push(e);
  };

  Runtime.prototype.swap = function() {
    var e1, e2;
    e1 = this.stack[this.stack.length - 1];
    e2 = this.stack[this.stack.length - 2];
    this.stack[this.stack.length - 1] = e2;
    return this.stack[this.stack.length - 2] = e1;
  };

  if (window.bef == null) {
    window.bef = {};
  }

  window.bef.Runtime = Runtime;

}).call(this);
