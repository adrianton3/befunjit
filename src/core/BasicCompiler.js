// Generated by CoffeeScript 1.7.1
(function() {
  'use strict';
  var BasicCompiler, codeMap;

  codeMap = {
    ' ': function() {
      return '/*   */';
    },
    '0': function() {
      return '/* 0 */  runtime.push(0)';
    },
    '1': function() {
      return '/* 1 */  runtime.push(1)';
    },
    '2': function() {
      return '/* 2 */  runtime.push(2)';
    },
    '3': function() {
      return '/* 3 */  runtime.push(3)';
    },
    '4': function() {
      return '/* 4 */  runtime.push(4)';
    },
    '5': function() {
      return '/* 5 */  runtime.push(5)';
    },
    '6': function() {
      return '/* 6 */  runtime.push(6)';
    },
    '7': function() {
      return '/* 7 */  runtime.push(7)';
    },
    '8': function() {
      return '/* 8 */  runtime.push(8)';
    },
    '9': function() {
      return '/* 9 */  runtime.push(9)';
    },
    '+': function() {
      return '/* + */  runtime.push(runtime.pop() + runtime.pop())';
    },
    '-': function() {
      return '/* - */  runtime.push(runtime.pop() - runtime.pop())';
    },
    '*': function() {
      return '/* * */  runtime.push(runtime.pop() * runtime.pop())';
    },
    '/': function() {
      return '/* / */  runtime.push(Math.floor(runtime.pop() / runtime.pop()))';
    },
    '%': function() {
      return '/* % */  runtime.push(runtime.pop() % runtime.pop())';
    },
    '!': function() {
      return '/* ! */  runtime.push(+!runtime.pop())';
    },
    '`': function() {
      return '/* ` */  runtime.push(+(runtime.pop() > runtime.pop()))';
    },
    '^': function() {
      return '/* ^ */';
    },
    '<': function() {
      return '/* < */';
    },
    'v': function() {
      return '/* v */';
    },
    '>': function() {
      return '/* > */';
    },
    '?': function() {
      return '/* ? */';
    },
    '_': function() {
      return '/* _ */  return;';
    },
    '|': function() {
      return '/* | */  return;';
    },
    '"': function() {
      return '/* " */';
    },
    ':': function() {
      return '/* : */  runtime.duplicate()';
    },
    '\\': function() {
      return '/* \\ */  runtime.swap()';
    },
    '$': function() {
      return '/* $ */  runtime.pop()';
    },
    '.': function() {
      return '/* . */  runtime.out(runtime.pop())';
    },
    ',': function() {
      return '/* , */  runtime.out(String.fromCharCode(runtime.pop()))';
    },
    '#': function() {
      return '/* # */';
    },
    'p': function(x, y, dir, index) {
      return ("/* p */  runtime.put(runtime.pop(), runtime.pop(), runtime.pop(), " + x + ", " + y + ", '" + dir + "', " + index + ")\n") + "if (runtime.flags.pathInvalidatedAhead) { return; }";
    },
    'g': function() {
      return '/* g */  runtime.push(runtime.get(runtime.pop(), runtime.pop()))';
    },
    '&': function() {
      return '/* & */  runtime.push(runtime.next())';
    },
    '~': function() {
      return '/* ~ */  runtime.push(runtime.nextChar())';
    },
    '@': function() {
      return '/* @ */  return;';
    }
  };

  BasicCompiler = function() {};

  BasicCompiler.assemble = function(path) {
    var charList, lines;
    charList = path.getAsList();
    lines = charList.map(function(entry, i) {
      var codeGenerator;
      if (entry.string) {
        return "/* '" + entry.char + "' */  runtime.push(" + (entry.char.charCodeAt(0)) + ")";
      } else {
        codeGenerator = codeMap[entry.char];
        if (codeGenerator != null) {
          return codeGenerator(entry.x, entry.y, entry.dir, i);
        } else {
          return "/* __ " + entry.char + " */";
        }
      }
    });
    return lines.join('\n');
  };

  BasicCompiler.compile = function(path) {
    var code, compiled;
    code = BasicCompiler.assemble(path);
    path.code = code;
    compiled = new Function('runtime', code);
    return path.body = compiled;
  };

  if (window.bef == null) {
    window.bef = {};
  }

  window.bef.BasicCompiler = BasicCompiler;

}).call(this);
