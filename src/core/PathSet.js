// Generated by CoffeeScript 1.12.4
(function() {
  'use strict';
  var PathSet, S, getHashAny, getHashDir;

  S = bef.Symbols;

  getHashAny = function(x, y) {
    return x + "_" + y;
  };

  getHashDir = function(x, y, dir) {
    return x + "_" + y + "_" + dir;
  };

  PathSet = function() {
    this.map = new Map;
  };

  PathSet.prototype.add = function(path) {
    var hash, head, ref;
    head = path.list[0];
    hash = (ref = head.charCode) === S.UP || ref === S.LEFT || ref === S.DOWN || ref === S.RIGHT ? getHashAny(head.x, head.y) : getHashDir(head.x, head.y, head.dir);
    this.map.set(hash, path);
    return this;
  };

  PathSet.prototype.getStartingFrom = function(x, y, dir) {
    var hashAny, hashDir;
    hashDir = getHashDir(x, y, dir);
    if (this.map.has(hashDir)) {
      return this.map.get(hashDir);
    } else {
      hashAny = getHashAny(x, y);
      return this.map.get(hashAny);
    }
  };

  PathSet.prototype.remove = function(path) {
    var hash, head, ref;
    head = path.list[0];
    hash = (ref = head.charCode) === S.UP || ref === S.LEFT || ref === S.DOWN || ref === S.RIGHT ? getHashAny(head.x, head.y) : getHashDir(head.x, head.y, head.dir);
    this.map["delete"](hash);
    return this;
  };

  PathSet.prototype.clear = function() {
    this.map.clear();
    return this;
  };

  if (window.bef == null) {
    window.bef = {};
  }

  window.bef.PathSet = PathSet;

}).call(this);
