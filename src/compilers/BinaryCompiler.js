// Generated by CoffeeScript 1.8.0
(function() {
  'use strict';
  var BinaryCompiler, assemble, compile, consumeCount, consumePair, generateCode, generateTree, getMaxDepth;

  consumePair = function(consume, delta) {
    return {
      consume: consume,
      delta: delta
    };
  };

  consumeCount = new Map([[' ', consumePair(0, 0)], ['0', consumePair(0, 1)], ['1', consumePair(0, 1)], ['2', consumePair(0, 1)], ['3', consumePair(0, 1)], ['4', consumePair(0, 1)], ['5', consumePair(0, 1)], ['6', consumePair(0, 1)], ['7', consumePair(0, 1)], ['8', consumePair(0, 1)], ['9', consumePair(0, 1)], ['+', consumePair(2, -1)], ['-', consumePair(2, -1)], ['*', consumePair(2, -1)], ['/', consumePair(2, -1)], ['%', consumePair(2, -1)], ['!', consumePair(1, 0)], ['`', consumePair(2, -1)], ['^', consumePair(0, 0)], ['<', consumePair(0, 0)], ['v', consumePair(0, 0)], ['>', consumePair(0, 0)], ['?', consumePair(0, 0)], ['_', consumePair(0, 0)], ['|', consumePair(0, 0)], ['"', consumePair(0, 0)], [':', consumePair(0, 1)], ['\\', consumePair(2, 0)], ['$', consumePair(1, -1)], ['.', consumePair(1, -1)], [',', consumePair(1, -1)], ['#', consumePair(0, 0)], ['p', consumePair(3, -3)], ['g', consumePair(2, -1)], ['&', consumePair(0, 1)], ['~', consumePair(0, 1)], ['@', consumePair(0, 0)]]);

  getMaxDepth = function(path) {
    var max;
    max = path.getAsList().reduce(function(_arg, _arg1) {
      var char, consume, delta, max, string, sum, _ref;
      max = _arg.max, sum = _arg.sum;
      char = _arg1.char, string = _arg1.string;
      _ref = string ? {
        consume: 0,
        delta: 1
      } : consumeCount.has(char) ? consumeCount.get(char) : {
        consume: 0,
        delta: 0
      }, consume = _ref.consume, delta = _ref.delta;
      return {
        sum: sum + delta,
        max: Math.min(max, sum - consume)
      };
    }, {
      max: 0,
      sum: 0
    }).max;
    return -max;
  };

  generateTree = function(codes, id) {
    var generate;
    generate = function(from, to) {
      var mid;
      if (from >= to) {
        return codes[from];
      } else {
        mid = Math.floor((from + to) / 2);
        return "if (length_" + id + " < " + (mid + 1) + ") {\n	" + (generate(from, mid)) + "\n} else {\n	" + (generate(mid + 1, to)) + "\n}";
      }
    };
    if (codes.length === 0) {
      return '';
    } else if (codes.length === 1) {
      return codes[0];
    } else {
      return "const length_" + id + " = programState.getLength()\n" + (generate(0, codes.length - 1));
    }
  };

  generateCode = function(path, maxDepth) {
    var charList, codeMap, makeStack, stack, _ref;
    _ref = window.bef.StackingCompiler, makeStack = _ref.makeStack, codeMap = _ref.codeMap;
    charList = path.getAsList();
    stack = makeStack("" + path.id + "_" + maxDepth, {
      popMethod: 'popUnsafe',
      freePops: maxDepth
    });
    charList.forEach(function(entry, i) {
      var codeGenerator;
      if (entry.string) {
        stack.push(entry.char.charCodeAt(0));
      } else {
        codeGenerator = codeMap[entry.char];
        if (codeGenerator != null) {
          codeGenerator(entry.x, entry.y, entry.dir, i, stack, path.from, path.to);
        }
      }
    });
    stack.dump();
    return stack.stringify();
  };

  assemble = function(path) {
    var codes, depth, maxDepth;
    maxDepth = getMaxDepth(path);
    codes = (function() {
      var _i, _results;
      _results = [];
      for (depth = _i = 0; 0 <= maxDepth ? _i <= maxDepth : _i >= maxDepth; depth = 0 <= maxDepth ? ++_i : --_i) {
        _results.push(generateCode(path, depth));
      }
      return _results;
    })();
    return generateTree(codes, path.id);
  };

  compile = function(path) {
    var code, compiled;
    code = assemble(path);
    path.code = code;
    compiled = new Function('programState', code);
    return path.body = compiled;
  };

  BinaryCompiler = function() {};

  Object.assign(BinaryCompiler, {
    getMaxDepth: getMaxDepth,
    generateTree: generateTree,
    assemble: assemble,
    compile: compile
  });

  if (window.bef == null) {
    window.bef = {};
  }

  window.bef.BinaryCompiler = BinaryCompiler;

}).call(this);
