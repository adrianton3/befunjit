// Generated by CoffeeScript 1.12.4
(function() {
  'use strict';
  var BinaryCompiler, assemble, generateCode, generateTree, getDepth;

  getDepth = bef.PathMetrics.getDepth;

  generateTree = function(codes, id) {
    var generate;
    generate = function(from, to) {
      var mid;
      if (from >= to) {
        return codes[from];
      } else {
        mid = Math.floor((from + to) / 2);
        return "if (length_" + id + " < " + (mid + 1) + ") {\n	" + (generate(from, mid)) + "\n} else {\n	" + (generate(mid + 1, to)) + "\n}";
      }
    };
    if (codes.length === 0) {
      return '';
    } else if (codes.length === 1) {
      return codes[0];
    } else {
      return "const length_" + id + " = programState.getLength()\nif (length_" + id + " < " + (codes.length - 1) + ") {\n	" + (generate(0, codes.length - 2)) + "\n} else {\n	" + codes[codes.length - 1] + "\n}";
    }
  };

  generateCode = function(path, maxDepth, options) {
    var charList, codeGenerator, codeMap, entry, i, len, makeStack, ref, stack;
    ref = window.bef.StackingCompiler, makeStack = ref.makeStack, codeMap = ref.codeMap;
    charList = path.getAsList();
    stack = makeStack(path.id + "_" + maxDepth, path.ending, Object.assign({
      popMethod: 'popUnsafe',
      freePops: maxDepth
    }, options));
    for (i = 0, len = charList.length; i < len; i++) {
      entry = charList[i];
      if (entry.string) {
        stack.push(entry.charCode);
      } else {
        codeGenerator = codeMap.get(entry.charCode);
        if (codeGenerator != null) {
          codeGenerator(stack);
        }
      }
    }
    return stack.stringify();
  };

  assemble = function(path, options) {
    var codes, depth, max;
    if (options == null) {
      options = {};
    }
    max = getDepth(path).max;
    codes = (function() {
      var i, ref, results;
      results = [];
      for (depth = i = 0, ref = max; 0 <= ref ? i <= ref : i >= ref; depth = 0 <= ref ? ++i : --i) {
        results.push(generateCode(path, depth, options));
      }
      return results;
    })();
    return generateTree(codes, path.id);
  };

  BinaryCompiler = function() {};

  Object.assign(BinaryCompiler, {
    generateTree: generateTree,
    assemble: assemble
  });

  if (window.bef == null) {
    window.bef = {};
  }

  window.bef.BinaryCompiler = BinaryCompiler;

}).call(this);
