// Generated by CoffeeScript 1.11.0
(function() {
  'use strict';
  var BasicCompiler, codeMap;

  codeMap = {
    ' ': '/*   */',
    '0': '/* 0 */  programState.push(0)',
    '1': '/* 1 */  programState.push(1)',
    '2': '/* 2 */  programState.push(2)',
    '3': '/* 3 */  programState.push(3)',
    '4': '/* 4 */  programState.push(4)',
    '5': '/* 5 */  programState.push(5)',
    '6': '/* 6 */  programState.push(6)',
    '7': '/* 7 */  programState.push(7)',
    '8': '/* 8 */  programState.push(8)',
    '9': '/* 9 */  programState.push(9)',
    '+': '/* + */  programState.push(programState.pop() + programState.pop())',
    '-': '/* - */  programState.push(-programState.pop() + programState.pop())',
    '*': '/* * */  programState.push(programState.pop() * programState.pop())',
    '/': '/* / */  programState.div(programState.pop(), programState.pop())',
    '%': '/* % */  programState.mod(programState.pop(), programState.pop())',
    '!': '/* ! */  programState.push(+!programState.pop())',
    '`': '/* ` */  programState.push(+(programState.pop() < programState.pop()))',
    '^': '/* ^ */',
    '<': '/* < */',
    'v': '/* v */',
    '>': '/* > */',
    '?': '/* ? */  /*return;*/',
    '_': '/* _ */  /*return;*/',
    '|': '/* | */  /*return;*/',
    '"': '/* " */',
    ':': '/* : */  programState.duplicate()',
    '\\': '/* \\ */  programState.swap()',
    '$': '/* $ */  programState.pop()',
    '.': '/* . */  programState.out(programState.pop())',
    ',': '/* , */  programState.out(String.fromCharCode(programState.pop()))',
    '#': '/* # */',
    'p': '/* p */  /*return;*/',
    'g': '/* g */  programState.push(programState.get(programState.pop(), programState.pop()))',
    '&': '/* & */  programState.push(programState.next())',
    '~': '/* ~ */  programState.push(programState.nextChar())',
    '@': '/* @ */  programState.exit() /*return;*/'
  };

  BasicCompiler = function() {};

  BasicCompiler.assemble = function(path, options) {
    var charList, fastConditionals, lines, ref, ref1;
    if (options == null) {
      options = {};
    }
    fastConditionals = (ref = options.fastConditionals) != null ? ref : false;
    charList = path.getAsList();
    lines = charList.map(function(arg) {
      var char, ref1, string;
      char = arg.char, string = arg.string;
      if (string) {
        return "/* '" + char + "' */  programState.push(" + (char.charCodeAt(0)) + ")";
      } else {
        return (ref1 = codeMap[char]) != null ? ref1 : "/* __ " + char + " */";
      }
    });
    if (fastConditionals && ((ref1 = path.ending.char) === '|' || ref1 === '_')) {
      return (lines.join('\n')) + "\nbranchFlag = stack.pop()";
    } else {
      return lines.join('\n');
    }
  };

  if (window.bef == null) {
    window.bef = {};
  }

  window.bef.BasicCompiler = BasicCompiler;

}).call(this);
