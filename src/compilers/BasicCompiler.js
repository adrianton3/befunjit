// Generated by CoffeeScript 1.12.7
(function() {
  'use strict';
  var BasicCompiler, S, codeMap;

  S = bef.Symbols;

  codeMap = new Map([[S.BLANK, '/*   */'], [S.D0, '/* 0 */  programState.push(0)'], [S.D1, '/* 1 */  programState.push(1)'], [S.D2, '/* 2 */  programState.push(2)'], [S.D3, '/* 3 */  programState.push(3)'], [S.D4, '/* 4 */  programState.push(4)'], [S.D5, '/* 5 */  programState.push(5)'], [S.D6, '/* 6 */  programState.push(6)'], [S.D7, '/* 7 */  programState.push(7)'], [S.D8, '/* 8 */  programState.push(8)'], [S.D9, '/* 9 */  programState.push(9)'], [S.ADD, '/* + */  programState.push(programState.pop() + programState.pop())'], [S.SUB, '/* - */  programState.push(-programState.pop() + programState.pop())'], [S.MUL, '/* * */  programState.push(programState.pop() * programState.pop())'], [S.DIV, '/* / */  programState.div(programState.pop(), programState.pop())'], [S.MOD, '/* % */  programState.mod(programState.pop(), programState.pop())'], [S.NOT, '/* ! */  programState.push(+!programState.pop())'], [S.GT, '/* ` */  programState.push(+(programState.pop() < programState.pop()))'], [S.UP, '/* ^ */'], [S.LEFT, '/* < */'], [S.DOWN, '/* v */'], [S.RIGHT, '/* > */'], [S.RAND, '/* ? */  /* return */'], [S.IFH, '/* _ */  /* return */'], [S.IFV, '/* | */  /* return */'], [S.QUOT, '/* " */'], [S.DUP, '/* : */  programState.duplicate()'], [S.SWAP, '/* \\ */  programState.swap()'], [S.DROP, '/* $ */  programState.pop()'], [S.OUTI, '/* . */  programState.out(programState.pop())'], [S.OUTC, '/* , */  programState.outChar(String.fromCharCode(programState.pop()))'], [S.JUMP, '/* # */'], [S.PUT, '/* p */  /* return */'], [S.GET, '/* g */  programState.push(programState.get(programState.pop(), programState.pop()))'], [S.INI, '/* & */  programState.push(programState.next())'], [S.INC, '/* ~ */  programState.push(programState.nextChar())'], [S.END, '/* @ */  programState.exit() /* return */']]);

  BasicCompiler = function() {};

  BasicCompiler.assemble = function(path, options) {
    var charList, lines, ref, ref1;
    if (options == null) {
      options = {};
    }
    charList = path.getAsList();
    lines = charList.map(function(arg) {
      var charCode, string;
      charCode = arg.charCode, string = arg.string;
      if (string) {
        return "/* '" + (String.fromCharCode(charCode)) + "' */  programState.push(" + charCode + ")";
      } else if (codeMap.has(charCode)) {
        return codeMap.get(charCode);
      } else if ((32 <= charCode && charCode <= 126)) {
        return "/* '" + (String.fromCharCode(charCode)) + "' */";
      } else {
        return "/* #" + charCode + " */";
      }
    });
    if ((ref = (ref1 = path.ending) != null ? ref1.charCode : void 0) === S.IFV || ref === S.IFH) {
      return (lines.join('\n')) + "\nbranchFlag = programState.pop()";
    } else {
      return lines.join('\n');
    }
  };

  if (window.bef == null) {
    window.bef = {};
  }

  window.bef.BasicCompiler = BasicCompiler;

}).call(this);
