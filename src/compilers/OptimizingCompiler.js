// Generated by CoffeeScript 1.12.7
(function() {
  'use strict';
  var OptimizingCompiler, S, binaryOperator, codeMap, digitPusher, isNumber;

  S = bef.Symbols;

  isNumber = function(obj) {
    return typeof obj === 'number';
  };

  digitPusher = function(digit) {
    return function(stack) {
      stack.push(digit);
      return "/* " + digit + " */";
    };
  };

  binaryOperator = function(operatorFunction, operatorChar, stringFunction) {
    return function(stack) {
      var operand1, operand2;
      operand1 = stack.length > 0 ? stack.pop() : 'programState.pop()';
      operand2 = stack.length > 0 ? stack.pop() : 'programState.pop()';
      if ((isNumber(operand1)) && (isNumber(operand2))) {
        stack.push(operatorFunction(operand1, operand2));
        return "/* " + operatorChar + " */";
      } else {
        return "/* " + operatorChar + " */  " + (stringFunction(operand1, operand2));
      }
    };
  };

  codeMap = new Map([
    [
      S.BLANK, function() {
        return '/*   */';
      }
    ], [S.D0, digitPusher(0)], [S.D1, digitPusher(1)], [S.D2, digitPusher(2)], [S.D3, digitPusher(3)], [S.D4, digitPusher(4)], [S.D5, digitPusher(5)], [S.D6, digitPusher(6)], [S.D7, digitPusher(7)], [S.D8, digitPusher(8)], [S.D9, digitPusher(9)], [
      S.ADD, binaryOperator((function(o1, o2) {
        return o1 + o2;
      }), '+', function(o1, o2) {
        return "programState.push(" + o1 + " + " + o2 + ")";
      })
    ], [
      S.SUB, binaryOperator((function(o1, o2) {
        return o2 - o1;
      }), '-', function(o1, o2) {
        return "programState.push(- " + o1 + " + " + o2 + ")";
      })
    ], [
      S.MUL, binaryOperator((function(o1, o2) {
        return o1 * o2;
      }), '*', function(o1, o2) {
        return "programState.push(" + o1 + " * " + o2 + ")";
      })
    ], [
      S.DIV, binaryOperator((function(o1, o2) {
        return Math.floor(o2 / o1);
      }), '/', function(o1, o2) {
        return "programState.div(" + o1 + ", " + o2 + ")";
      })
    ], [
      S.MOD, binaryOperator((function(o1, o2) {
        return o2 % o1;
      }), '%', function(o1, o2) {
        return "programState.mod(" + o1 + ", " + o2 + ")";
      })
    ], [
      S.NOT, function(stack) {
        if (stack.length) {
          stack.push(+(!stack.pop()));
          return '/* ! */';
        } else {
          return '/* ! */  programState.push(+!programState.pop())';
        }
      }
    ], [
      S.GT, binaryOperator((function(o1, o2) {
        return +(o1 < o2);
      }), '`', function(o1, o2) {
        return "programState.push(+(" + o1 + " < " + o2 + "))";
      })
    ], [
      S.UP, function() {
        return '/* ^ */';
      }
    ], [
      S.LEFT, function() {
        return '/* < */';
      }
    ], [
      S.DOWN, function() {
        return '/* v */';
      }
    ], [
      S.RIGHT, function() {
        return '/* > */';
      }
    ], [
      S.RAND, function() {
        return '/* ? */';
      }
    ], [
      S.IFH, function() {
        return '/* _ */';
      }
    ], [
      S.IFV, function() {
        return '/* | */';
      }
    ], [
      S.QUOT, function() {
        return '/* " */';
      }
    ], [
      S.DUP, function(stack) {
        if (stack.length) {
          stack.push(stack[stack.length - 1]);
          return '/* : */';
        } else {
          return '/* : */  programState.duplicate()';
        }
      }
    ], [
      S.SWAP, function(stack) {
        var e1, e2;
        if (stack.length > 1) {
          e1 = stack[stack.length - 1];
          e2 = stack[stack.length - 2];
          stack[stack.length - 1] = e2;
          stack[stack.length - 2] = e1;
          return '/* \\ */';
        } else if (stack.length > 0) {
          return "/* \\ */  programState.push(" + (stack.pop()) + ", programState.pop())";
        } else {
          return '/* \\ */  programState.swap()';
        }
      }
    ], [
      S.DROP, function(stack) {
        if (stack.length > 0) {
          stack.pop();
          return '/* $ */';
        } else {
          return '/* $ */  programState.pop()';
        }
      }
    ], [
      S.OUTI, function(stack) {
        if (stack.length > 0) {
          return "/* . */  programState.out(" + (stack.pop()) + ")";
        } else {
          return '/* . */  programState.out(programState.pop())';
        }
      }
    ], [
      S.OUTC, function(stack) {
        if (stack.length > 0) {
          return "/* , */  programState.outChar(String.fromCharCode(" + (stack.pop()) + "))";
        } else {
          return '/* , */  programState.outChar(String.fromCharCode(programState.pop()))';
        }
      }
    ], [
      S.JUMP, function() {
        return '/* # */';
      }
    ], [
      S.PUT, function() {
        return '';
      }
    ], [
      S.GET, function(stack) {
        var operand1, operand2, stringedStack;
        operand1 = stack.length > 0 ? stack.pop() : 'programState.pop()';
        operand2 = stack.length > 0 ? stack.pop() : 'programState.pop()';
        if (stack.length > 0) {
          stringedStack = stack.join(', ');
          stack.length = 0;
          return "/* g */\nprogramState.push(" + stringedStack + ")\nprogramState.push(programState.get(" + operand1 + ", " + operand2 + "))";
        } else {
          return "/* g */  programState.push(programState.get(" + operand1 + ", " + operand2 + "))";
        }
      }
    ], [
      S.INI, function() {
        return '/* & */  programState.push(programState.next())';
      }
    ], [
      S.INC, function() {
        return '/* ~ */  programState.push(programState.nextChar())';
      }
    ], [
      S.END, function() {
        return '/* @ */  programState.exit()';
      }
    ]
  ]);

  OptimizingCompiler = function() {};

  OptimizingCompiler.assemble = function(path, options) {
    var charList, last, lines, ref, ref1, stack;
    if (options == null) {
      options = {};
    }
    charList = path.getAsList();
    stack = [];
    lines = charList.map(function(arg) {
      var charCode, codeGenerator, ret, string;
      charCode = arg.charCode, string = arg.string;
      if (string) {
        stack.push(charCode);
        return "/* '" + (String.fromCharCode(charCode)) + "' */";
      } else {
        if (codeMap.has(charCode)) {
          codeGenerator = codeMap.get(charCode);
          ret = '';
          if (charCode === S.INI || charCode === S.INC) {
            if (stack.length) {
              ret += "programState.push(" + (stack.join(', ')) + ");\n";
            }
            stack = [];
          }
          ret += codeGenerator(stack);
          return ret;
        } else if ((32 <= charCode && charCode <= 126)) {
          return "/* '" + (String.fromCharCode(charCode)) + "' */";
        } else {
          return "/* #" + charCode + " */";
        }
      }
    });
    if ((ref = (ref1 = path.ending) != null ? ref1.charCode : void 0) === S.IFV || ref === S.IFH) {
      if (stack.length === 0) {
        lines.push("branchFlag = programState.pop()");
      } else if (stack.length === 1) {
        lines.push("branchFlag = " + stack[0]);
      } else {
        last = stack.pop();
        lines.push("programState.push(" + (stack.join(', ')) + ")", "branchFlag = " + last);
      }
    } else {
      if (stack.length > 0) {
        lines.push("programState.push(" + (stack.join(', ')) + ")");
      }
    }
    return lines.join('\n');
  };

  if (window.bef == null) {
    window.bef = {};
  }

  window.bef.OptimizingCompiler = OptimizingCompiler;

}).call(this);
