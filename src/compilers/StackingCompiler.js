// Generated by CoffeeScript 1.11.0
(function() {
  'use strict';
  var StackingCompiler, assemble, assembleTight, binaryOperator, codeMap, consumeCount, consumePair, digitPusher, getMaxDepth, isNumber, makeStack, writeBack;

  consumePair = function(consume, delta) {
    return {
      consume: consume,
      delta: delta
    };
  };

  consumeCount = new Map([[' ', consumePair(0, 0)], ['0', consumePair(0, 1)], ['1', consumePair(0, 1)], ['2', consumePair(0, 1)], ['3', consumePair(0, 1)], ['4', consumePair(0, 1)], ['5', consumePair(0, 1)], ['6', consumePair(0, 1)], ['7', consumePair(0, 1)], ['8', consumePair(0, 1)], ['9', consumePair(0, 1)], ['+', consumePair(2, -1)], ['-', consumePair(2, -1)], ['*', consumePair(2, -1)], ['/', consumePair(2, -1)], ['%', consumePair(2, -1)], ['!', consumePair(1, 0)], ['`', consumePair(2, -1)], ['^', consumePair(0, 0)], ['<', consumePair(0, 0)], ['v', consumePair(0, 0)], ['>', consumePair(0, 0)], ['?', consumePair(0, 0)], ['_', consumePair(1, -1)], ['|', consumePair(1, -1)], ['"', consumePair(0, 0)], [':', consumePair(0, 1)], ['\\', consumePair(2, 0)], ['$', consumePair(1, -1)], ['.', consumePair(1, -1)], [',', consumePair(1, -1)], ['#', consumePair(0, 0)], ['p', consumePair(3, -3)], ['g', consumePair(2, -1)], ['&', consumePair(0, 1)], ['~', consumePair(0, 1)], ['@', consumePair(0, 0)]]);

  getMaxDepth = function(path) {
    var max, ref, sum;
    ref = path.getAsList().reduce(function(arg, arg1) {
      var char, consume, delta, max, ref, string, sum;
      max = arg.max, sum = arg.sum;
      char = arg1.char, string = arg1.string;
      ref = string ? {
        consume: 0,
        delta: 1
      } : consumeCount.has(char) ? consumeCount.get(char) : {
        consume: 0,
        delta: 0
      }, consume = ref.consume, delta = ref.delta;
      return {
        sum: sum + delta,
        max: Math.min(max, sum - consume)
      };
    }, {
      max: 0,
      sum: 0
    }), max = ref.max, sum = ref.sum;
    return {
      max: -max,
      sum: sum
    };
  };

  isNumber = function(obj) {
    return typeof obj === 'number';
  };

  digitPusher = function(digit) {
    return function(stack) {
      stack.push(digit);
    };
  };

  binaryOperator = function(operatorFunction, operatorChar, stringFunction) {
    return function(stack) {
      var fun, operand1, operand2;
      operand1 = stack.pop();
      operand2 = stack.pop();
      fun = (isNumber(operand1)) && (isNumber(operand2)) ? operatorFunction : stringFunction;
      stack.push(fun(operand1, operand2));
    };
  };

  codeMap = {
    ' ': function() {},
    '0': digitPusher(0),
    '1': digitPusher(1),
    '2': digitPusher(2),
    '3': digitPusher(3),
    '4': digitPusher(4),
    '5': digitPusher(5),
    '6': digitPusher(6),
    '7': digitPusher(7),
    '8': digitPusher(8),
    '9': digitPusher(9),
    '+': binaryOperator((function(o1, o2) {
      return o2 + o1;
    }), '+', function(o1, o2) {
      return "(" + o2 + " + " + o1 + ")";
    }),
    '-': binaryOperator((function(o1, o2) {
      return o2 - o1;
    }), '-', function(o1, o2) {
      return "(" + o2 + " - " + o1 + ")";
    }),
    '*': binaryOperator((function(o1, o2) {
      return o2 * o1;
    }), '*', function(o1, o2) {
      return "(" + o2 + " * " + o1 + ")";
    }),
    '/': binaryOperator((function(o1, o2) {
      return Math.floor(o2 / o1);
    }), '/', function(o1, o2) {
      return "Math.floor(" + o2 + " / " + o1 + ")";
    }),
    '%': binaryOperator((function(o1, o2) {
      return o2 % o1;
    }), '%', function(o1, o2) {
      return "(" + o2 + " % " + o1 + ")";
    }),
    '!': function(stack) {
      var operand;
      operand = stack.pop();
      stack.push(isNumber(operand) ? +(!operand) : "(+!" + operand + ")");
    },
    '`': binaryOperator((function(o1, o2) {
      return +(o1 < o2);
    }), '`', function(o1, o2) {
      return "(+(" + o1 + " < " + o2 + "))";
    }),
    '^': function() {},
    '<': function() {},
    'v': function() {},
    '>': function() {},
    '?': function() {},
    '_': function() {},
    '|': function() {},
    '"': function() {},
    ':': function(stack) {
      var top;
      top = stack.peek();
      stack.push(top);
    },
    '\\': function(stack) {
      var e1, e2;
      e1 = stack.pop();
      e2 = stack.pop();
      stack.push(e1, e2);
    },
    '$': function(stack) {
      stack.pop();
    },
    '.': function(stack) {
      stack.out("programState.out(" + (stack.pop()) + ")");
    },
    ',': function(stack) {
      stack.out("programState.out(String.fromCharCode(" + (stack.pop()) + "))");
    },
    '#': function() {},
    'p': function() {
      return '';
    },
    'g': function(stack) {
      stack.push("programState.get(" + (stack.pop()) + ", " + (stack.pop()) + ")");
    },
    '&': function(stack) {
      stack.push(stack.next());
    },
    '~': function(stack) {
      stack.push(stack.nextChar());
    },
    '@': function(stack) {
      stack.exit();
    }
  };

  makeStack = function(uid, options) {
    var declarations, exitRequest, fastConditionals, freePops, makeNext, popCount, popMethod, pushBack, pushCount, reads, ref, ref1, ref2, ref3, ref4, stack, stackObj, writes;
    if (options == null) {
      options = {};
    }
    popMethod = (ref = options.popMethod) != null ? ref : 'pop';
    freePops = (ref1 = options.freePops) != null ? ref1 : 2e308;
    fastConditionals = (ref2 = options.fastConditionals) != null ? ref2 : false;
    popCount = (ref3 = options.popCount) != null ? ref3 : 0;
    pushCount = (ref4 = options.pushCount) != null ? ref4 : 0;
    stack = [];
    declarations = [];
    reads = [];
    writes = [];
    exitRequest = false;
    stackObj = {};
    stackObj.push = function() {
      Array.prototype.push.apply(stack, arguments);
    };
    stackObj.pop = function() {
      var name;
      if (stack.length > 0) {
        return stack.pop();
      } else if (freePops <= 0) {
        return 0;
      } else {
        freePops--;
        name = "p" + uid + "_" + declarations.length;
        declarations.push(popCount > 0 ? "var " + name + " = t" + uid + "_" + (popCount - 1) : "var " + name + " = programState." + popMethod + "()");
        popCount = Math.max(0, popCount - 1);
        return name;
      }
    };
    stackObj.peek = function() {
      var name;
      if (stack.length > 0) {
        return stack[stack.length - 1];
      } else {
        name = "p" + uid + "_" + declarations.length;
        declarations.push(popCount > 0 ? "var " + name + " = t" + uid + "_" + (popCount - 1) : "var " + name + " = programState.peek()");
        return name;
      }
    };
    makeNext = function(methodName) {
      return function() {
        var name;
        name = "r" + uid + "_" + reads.length;
        reads.push("var " + name + " = programState." + methodName + "()");
        return name;
      };
    };
    stackObj.next = makeNext('next');
    stackObj.nextChar = makeNext('nextChar');
    stackObj.out = function(entry) {
      writes.push(entry);
    };
    pushBack = function(stack, pushCount) {
      var copies, i, pushes;
      copies = (function() {
        var j, ref5, results;
        results = [];
        for (i = j = 0, ref5 = pushCount; 0 <= ref5 ? j < ref5 : j > ref5; i = 0 <= ref5 ? ++j : --j) {
          results.push("t" + uid + "_" + i + " = " + stack[i]);
        }
        return results;
      })();
      if (pushCount < stack.length) {
        pushes = stack.slice(pushCount);
        return (copies.join('\n')) + "\nstack.push(" + (pushes.join(', ')) + ")";
      } else {
        return copies.join('\n');
      }
    };
    stackObj.stringify = function() {
      var branchChunk, stackChunk;
      stackChunk = fastConditionals ? stack.length === 0 ? 'branchFlag = programState.pop();' : stack.length === 1 ? "branchFlag = " + stack[0] + ";" : (branchChunk = "branchFlag = " + (stack.pop()) + ";", (pushBack(stack, pushCount)) + "\n" + branchChunk) : stack.length === 0 ? '' : pushBack(stack, pushCount);
      return (declarations.join('\n')) + "\n" + (reads.join('\n')) + "\n" + stackChunk + "\n" + (writes.join('\n')) + "\n" + (exitRequest ? 'programState.exit()' : '');
    };
    stackObj.exit = function() {
      return exitRequest = true;
    };
    return stackObj;
  };

  assemble = function(path, options) {
    var charList, stack;
    charList = path.getAsList();
    stack = makeStack(path.id, options);
    charList.forEach(function(entry) {
      var codeGenerator;
      if (entry.string) {
        stack.push(entry.char.charCodeAt(0));
      } else {
        codeGenerator = codeMap[entry.char];
        if (codeGenerator != null) {
          codeGenerator(stack);
        }
      }
    });
    return stack.stringify();
  };

  writeBack = function(count, uid) {
    var i, temps;
    temps = (function() {
      var j, ref, results;
      results = [];
      for (i = j = 0, ref = count; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
        results.push("t" + uid + "_" + i);
      }
      return results;
    })();
    return "stack.push(" + (temps.join(', ')) + ")";
  };

  assembleTight = function(path, options) {
    var max, popCount, pushCount, ref, sum, tempCount;
    ref = getMaxDepth(path), max = ref.max, sum = ref.sum;
    tempCount = Math.min(max, max + sum);
    if (tempCount <= 0) {
      return assemble(path, options);
    } else {
      pushCount = tempCount;
      popCount = tempCount;
      return {
        pre: assemble(path, Object.assign({
          pushCount: pushCount
        }, options)),
        body: assemble(path, Object.assign({
          popCount: popCount,
          pushCount: pushCount
        }, options)),
        post: writeBack(tempCount, path.id)
      };
    }
  };

  StackingCompiler = function() {};

  Object.assign(StackingCompiler, {
    codeMap: codeMap,
    makeStack: makeStack,
    assemble: assemble,
    assembleTight: assembleTight
  });

  if (window.bef == null) {
    window.bef = {};
  }

  window.bef.StackingCompiler = StackingCompiler;

}).call(this);
