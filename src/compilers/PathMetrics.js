// Generated by CoffeeScript 1.12.4
(function() {
  'use strict';
  var PathMetrics, S, consumeCount, consumePair, getDepth;

  S = bef.Symbols;

  consumePair = function(consume, delta) {
    return {
      consume: consume,
      delta: delta
    };
  };

  consumeCount = new Map([[S.BLANK, consumePair(0, 0)], [S.D0, consumePair(0, 1)], [S.D1, consumePair(0, 1)], [S.D2, consumePair(0, 1)], [S.D3, consumePair(0, 1)], [S.D4, consumePair(0, 1)], [S.D5, consumePair(0, 1)], [S.D6, consumePair(0, 1)], [S.D7, consumePair(0, 1)], [S.D8, consumePair(0, 1)], [S.D9, consumePair(0, 1)], [S.ADD, consumePair(2, -1)], [S.SUB, consumePair(2, -1)], [S.MUL, consumePair(2, -1)], [S.DIV, consumePair(2, -1)], [S.MOD, consumePair(2, -1)], [S.NOT, consumePair(1, 0)], [S.GT, consumePair(2, -1)], [S.UP, consumePair(0, 0)], [S.LEFT, consumePair(0, 0)], [S.DOWN, consumePair(0, 0)], [S.RIGHT, consumePair(0, 0)], [S.RAND, consumePair(0, 0)], [S.IFH, consumePair(1, -1)], [S.IFV, consumePair(1, -1)], [S.QUOT, consumePair(0, 0)], [S.DUP, consumePair(0, 1)], [S.SWAP, consumePair(2, 0)], [S.DROP, consumePair(1, -1)], [S.OUTI, consumePair(1, -1)], [S.OUTC, consumePair(1, -1)], [S.JUMP, consumePair(0, 0)], [S.PUT, consumePair(3, -3)], [S.GET, consumePair(2, -1)], [S.INI, consumePair(0, 1)], [S.INC, consumePair(0, 1)], [S.END, consumePair(0, 0)]]);

  getDepth = function(path) {
    var max, ref, sum;
    ref = path.getAsList().reduce(function(arg, arg1) {
      var charCode, consume, delta, max, ref, string, sum;
      max = arg.max, sum = arg.sum;
      charCode = arg1.charCode, string = arg1.string;
      ref = string ? {
        consume: 0,
        delta: 1
      } : consumeCount.has(charCode) ? consumeCount.get(charCode) : {
        consume: 0,
        delta: 0
      }, consume = ref.consume, delta = ref.delta;
      return {
        sum: sum + delta,
        max: Math.min(max, sum - consume)
      };
    }, {
      max: 0,
      sum: 0
    }), max = ref.max, sum = ref.sum;
    return {
      max: -max,
      sum: sum
    };
  };

  PathMetrics = function() {};

  Object.assign(PathMetrics, {
    getDepth: getDepth
  });

  if (window.bef == null) {
    window.bef = {};
  }

  window.bef.PathMetrics = PathMetrics;

}).call(this);
