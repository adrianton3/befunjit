// Generated by CoffeeScript 1.8.0
(function() {
  'use strict';
  var grid, inputEditor, jsEditor, outputEditor, run, setupEditors, setupRunButton, setupSamples, sourceEditor;

  sourceEditor = null;

  inputEditor = null;

  outputEditor = null;

  jsEditor = null;

  grid = null;

  setupSamples = function() {
    var select;
    select = document.getElementById('sample');
    (Object.keys(window.befSample)).forEach(function(sampleName) {
      var option;
      option = document.createElement('option');
      option.textContent = sampleName;
      select.appendChild(option);
    });
    return select.addEventListener('change', function() {
      var code, input, _ref;
      _ref = window.befSample[this.value], input = _ref.input, code = _ref.code;
      sourceEditor.setValue(code, 1);
      inputEditor.setValue(input, 1);
    });
  };

  setupEditors = function() {
    sourceEditor = ace.edit('source-editor');
    sourceEditor.setTheme('ace/theme/monokai');
    sourceEditor.setFontSize(14);
    inputEditor = ace.edit('input-editor');
    inputEditor.setTheme('ace/theme/monokai');
    inputEditor.getSession().setUseWrapMode(true);
    inputEditor.setFontSize(14);
    outputEditor = ace.edit('output-editor');
    outputEditor.setTheme('ace/theme/monokai');
    outputEditor.getSession().setUseWrapMode(true);
    outputEditor.setReadOnly(true);
    outputEditor.setFontSize(14);
    jsEditor = ace.edit('js-editor');
    jsEditor.setTheme('ace/theme/monokai');
    jsEditor.getSession().setMode('ace/mode/javascript');
    jsEditor.getSession().setUseWrapMode(true);
    jsEditor.setReadOnly(true);
    return jsEditor.setFontSize(14);
  };

  run = function() {
    var lazyRuntime, playfield, stringedOutput, stringedStack;
    playfield = new bef.Playfield();
    playfield.fromString(sourceEditor.getValue(), 16, 10);
    lazyRuntime = new bef.LazyRuntime();
    lazyRuntime.execute(playfield, {
      jumpLimit: 1000
    }, inputEditor.getValue());
    stringedStack = lazyRuntime.programState.stack.join(' ');
    stringedOutput = lazyRuntime.programState.outRecord.join(' ');
    outputEditor.setValue("Stack: " + stringedStack + "\nOutput: " + stringedOutput, 1);
    if (grid != null) {
      grid.destroy();
    }
    grid = new viz.Grid(playfield, lazyRuntime.pathSet, document.getElementById('can'));
    return grid.setListener(function(path) {
      var _ref;
      return jsEditor.setValue((_ref = path != null ? path.code : void 0) != null ? _ref : '');
    });
  };

  setupRunButton = function() {
    return (document.getElementById('run')).addEventListener('click', run);
  };

  setupSamples();

  setupEditors();

  setupRunButton();

  run();

}).call(this);
