// Generated by CoffeeScript 1.11.0
(function() {
  'use strict';
  var grid, height, loadProgram, ref, run, saveProgram, setupCompilers, setupEditors, setupRunButton, setupSamples, width;

  ref = window.viz, setupEditors = ref.setupEditors, setupSamples = ref.setupSamples, setupCompilers = ref.setupCompilers, setupRunButton = ref.setupRunButton, saveProgram = ref.saveProgram, loadProgram = ref.loadProgram;

  grid = null;

  width = 16;

  height = 10;

  run = function(editors, compiler) {
    var lazyRuntime, original, playfield, source, stringedOutput, stringedStack;
    saveProgram(editors);
    source = editors.source.getValue();
    original = new bef.Playfield();
    original.fromString(source, width, height);
    playfield = new bef.Playfield();
    playfield.fromString(source, width, height);
    lazyRuntime = new bef.LazyRuntime();
    lazyRuntime.execute(playfield, {
      jumpLimit: 1000,
      compiler: compiler
    }, editors.input.getValue());
    stringedStack = lazyRuntime.programState.stack.join(' ');
    stringedOutput = lazyRuntime.programState.outRecord.join(' ');
    editors.output.setValue("Stack: " + stringedStack + "\nOutput: " + stringedOutput, 1);
    if (grid != null) {
      grid.destroy();
    }
    grid = new viz.Grid(original, playfield, lazyRuntime.pathSet, document.getElementById('can'));
    return grid.setListener(function(path) {
      var code, ref1;
      code = (ref1 = path != null ? path.code : void 0) != null ? ref1 : '';
      editors.js.setValue(code, -1);
    });
  };

  (function() {
    var compiler, editors;
    compiler = bef.StackingCompiler;
    editors = setupEditors();
    setupSamples(window.befSample, editors);
    setupCompilers(function(_compiler) {
      compiler = _compiler;
      return run(editors, compiler);
    });
    setupRunButton(function() {
      return run(editors, compiler);
    });
    loadProgram(editors);
    return run(editors, compiler);
  })();

}).call(this);
